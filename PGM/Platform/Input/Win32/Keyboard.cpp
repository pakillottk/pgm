#include "../Keyboard.h"

#include <Windows.h>

namespace PGM::Platform::Input
{

namespace detail
{
    Key convertFromPlatformKey(int nativeKey)
    {
        switch (nativeKey)
        {
        case 'A':
            return A;
        case 'B':
            return B;
        case 'C':
            return C;
        case 'D':
            return D;
        case 'E':
            return E;
        case 'F':
            return F;
        case 'G':
            return G;
        case 'H':
            return H;
        case 'I':
            return I;
        case 'J':
            return J;
        case 'K':
            return K;
        case 'L':
            return L;
        case 'M':
            return M;
        case 'N':
            return N;
        case 'O':
            return O;
        case 'P':
            return P;
        case 'Q':
            return Q;
        case 'R':
            return R;
        case 'S':
            return S;
        case 'T':
            return T;
        case 'U':
            return U;
        case 'V':
            return V;
        case 'W':
            return W;
        case 'X':
            return X;
        case 'Y':
            return Y;
        case 'Z':
            return Z;
        case '0':
            return Num0;
        case '1':
            return Num1;
        case '2':
            return Num2;
        case '3':
            return Num3;
        case '4':
            return Num4;
        case '5':
            return Num5;
        case '6':
            return Num6;
        case '7':
            return Num7;
        case '8':
            return Num8;
        case '9':
            return Num9;
        case VK_ESCAPE:
            return Escape;
        case VK_LCONTROL:
            return LControl;
        case VK_LSHIFT:
            return LShift;
        case VK_LMENU:
            return LAlt;
        case VK_LWIN:
            return LSystem;
        case VK_RCONTROL:
            return RControl;
        case VK_RSHIFT:
            return RShift;
        case VK_RMENU:
            return RAlt;
        case VK_RWIN:
            return RSystem;
        case VK_APPS:
            return Menu;
        case VK_OEM_4:
            return LBracket;
        case VK_OEM_6:
            return RBracket;
        case VK_OEM_1:
            return Semicolon;
        case VK_OEM_COMMA:
            return Comma;
        case VK_OEM_PERIOD:
            return Period;
        case VK_OEM_7:
            return Apostrophe;
        case VK_OEM_2:
            return Slash;
        case VK_OEM_5:
            return Backslash;
        case VK_OEM_3:
            return Grave;
        case VK_OEM_PLUS:
            return Equal;
        case VK_OEM_MINUS:
            return Hyphen;
        case VK_SPACE:
            return Space;
        case VK_RETURN:
            return Enter;
        case VK_BACK:
            return Backspace;
        case VK_TAB:
            return Tab;
        case VK_PRIOR:
            return PageUp;
        case VK_NEXT:
            return PageDown;
        case VK_END:
            return End;
        case VK_HOME:
            return Home;
        case VK_INSERT:
            return Insert;
        case VK_DELETE:
            return Delete;
        case VK_ADD:
            return Add;
        case VK_SUBTRACT:
            return Subtract;
        case VK_MULTIPLY:
            return Multiply;
        case VK_DIVIDE:
            return Divide;
        case VK_LEFT:
            return Left;
        case VK_RIGHT:
            return Right;
        case VK_UP:
            return Up;
        case VK_DOWN:
            return Down;
        case VK_NUMPAD0:
            return Numpad0;
        case VK_NUMPAD1:
            return Numpad1;
        case VK_NUMPAD2:
            return Numpad2;
        case VK_NUMPAD3:
            return Numpad3;
        case VK_NUMPAD4:
            return Numpad4;
        case VK_NUMPAD5:
            return Numpad5;
        case VK_NUMPAD6:
            return Numpad6;
        case VK_NUMPAD7:
            return Numpad7;
        case VK_NUMPAD8:
            return Numpad8;
        case VK_NUMPAD9:
            return Numpad9;
        case VK_F1:
            return F1;
        case VK_F2:
            return F2;
        case VK_F3:
            return F3;
        case VK_F4:
            return F4;
        case VK_F5:
            return F5;
        case VK_F6:
            return F6;
        case VK_F7:
            return F7;
        case VK_F8:
            return F8;
        case VK_F9:
            return F9;
        case VK_F10:
            return F10;
        case VK_F11:
            return F11;
        case VK_F12:
            return F12;
        case VK_F13:
            return F13;
        case VK_F14:
            return F14;
        case VK_F15:
            return F15;
        case VK_PAUSE:
            return Pause;
        default:
            return Unknown;
        }
    }

    int convertToPlatformKey(Key key)
    {
        switch (key)
        {
        case A:
            return 'A';
        case B:
            return 'B';
        case C:
            return 'C';
        case D:
            return 'D';
        case E:
            return 'E';
        case F:
            return 'F';
        case G:
            return 'G';
        case H:
            return 'H';
        case I:
            return 'I';
        case J:
            return 'J';
        case K:
            return 'K';
        case L:
            return 'L';
        case M:
            return 'M';
        case N:
            return 'N';
        case O:
            return 'O';
        case P:
            return 'P';
        case Q:
            return 'Q';
        case R:
            return 'R';
        case S:
            return 'S';
        case T:
            return 'T';
        case U:
            return 'U';
        case V:
            return 'V';
        case W:
            return 'W';
        case X:
            return 'X';
        case Y:
            return 'Y';
        case Z:
            return 'Z';
        case Num0:
            return '0';
        case Num1:
            return '1';
        case Num2:
            return '2';
        case Num3:
            return '3';
        case Num4:
            return '4';
        case Num5:
            return '5';
        case Num6:
            return '6';
        case Num7:
            return '7';
        case Num8:
            return '8';
        case Num9:
            return '9';
        case Escape:
            return VK_ESCAPE;
        case LControl:
            return VK_LCONTROL;
        case LShift:
            return VK_LSHIFT;
        case LAlt:
            return VK_LMENU;
        case LSystem:
            return VK_LWIN;
        case RControl:
            return VK_RCONTROL;
        case RShift:
            return VK_RSHIFT;
        case RAlt:
            return VK_RMENU;
        case RSystem:
            return VK_RWIN;
        case Menu:
            return VK_APPS;
        case LBracket:
            return VK_OEM_4;
        case RBracket:
            return VK_OEM_6;
        case Semicolon:
            return VK_OEM_1;
        case Comma:
            return VK_OEM_COMMA;
        case Period:
            return VK_OEM_PERIOD;
        case Apostrophe:
            return VK_OEM_7;
        case Slash:
            return VK_OEM_2;
        case Backslash:
            return VK_OEM_5;
        case Grave:
            return VK_OEM_3;
        case Equal:
            return VK_OEM_PLUS;
        case Hyphen:
            return VK_OEM_MINUS;
        case Space:
            return VK_SPACE;
        case Enter:
            return VK_RETURN;
        case Backspace:
            return VK_BACK;
        case Tab:
            return VK_TAB;
        case PageUp:
            return VK_PRIOR;
        case PageDown:
            return VK_NEXT;
        case End:
            return VK_END;
        case Home:
            return VK_HOME;
        case Insert:
            return VK_INSERT;
        case Delete:
            return VK_DELETE;
        case Add:
            return VK_ADD;
        case Subtract:
            return VK_SUBTRACT;
        case Multiply:
            return VK_MULTIPLY;
        case Divide:
            return VK_DIVIDE;
        case Left:
            return VK_LEFT;
        case Right:
            return VK_RIGHT;
        case Up:
            return VK_UP;
        case Down:
            return VK_DOWN;
        case Numpad0:
            return VK_NUMPAD0;
        case Numpad1:
            return VK_NUMPAD1;
        case Numpad2:
            return VK_NUMPAD2;
        case Numpad3:
            return VK_NUMPAD3;
        case Numpad4:
            return VK_NUMPAD4;
        case Numpad5:
            return VK_NUMPAD5;
        case Numpad6:
            return VK_NUMPAD6;
        case Numpad7:
            return VK_NUMPAD7;
        case Numpad8:
            return VK_NUMPAD8;
        case Numpad9:
            return VK_NUMPAD9;
        case F1:
            return VK_F1;
        case F2:
            return VK_F2;
        case F3:
            return VK_F3;
        case F4:
            return VK_F4;
        case F5:
            return VK_F5;
        case F6:
            return VK_F6;
        case F7:
            return VK_F7;
        case F8:
            return VK_F8;
        case F9:
            return VK_F9;
        case F10:
            return VK_F10;
        case F11:
            return VK_F11;
        case F12:
            return VK_F12;
        case F13:
            return VK_F13;
        case F14:
            return VK_F14;
        case F15:
            return VK_F15;
        case Pause:
            return VK_PAUSE;
        default:
            return 0;
        }
    }

} // namespace detail

bool isKeyDown(Key key)
{
    const auto win32Key = detail::convertToPlatformKey(key);
    return (GetAsyncKeyState(win32Key) & 0x8000) != 0;
}

} // namespace PGM::Platform::Input